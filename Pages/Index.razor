@page "/"
@implements IDisposable
@using Microsoft.EntityFrameworkCore
@using FMail.Services
@using System.Timers
@using FMail.Data
@inject IDbContextFactory<SmtpDbContext> _dbContextFactory
@inject IMessageStoreChanged _messageStoreChanged
@inject ILogger<Index> _logger

<PageTitle>Messages</PageTitle>

<h1>Messages</h1>

<table class="table table-hover table-sm">
    <thead>
    <th>From</th>
    <th>To</th>
    <th>Subject</th>
    <th>Date</th>
    </thead>
    <tbody>
    <Virtualize Context="message" ItemsProvider="@LoadMessages" @ref="_messages">
        <tr>
            <td><a href="/message/@message.Id">@(SmtpAddress.FormatAddresses(message.From ?? new List<SmtpAddress>()))</a></td>
            <td><a href="/message/@message.Id">@(SmtpAddress.FormatAddresses(message.To ?? new List<SmtpAddress>()))</a></td>
            <td><a href="/message/@message.Id">@message.Subject</a></td>
            <td><a href="/message/@message.Id">@message.Date</a></td>
        </tr>
    </Virtualize>
    </tbody>
</table>

@code
{
    private readonly Timer _timer = new(5000) { AutoReset = true };
    private Virtualize<SmtpMessage>? _messages;

    protected override void OnInitialized()
    {
        _timer.Elapsed += OnElapsed;
        _timer.Enabled = true;
    }

    private async ValueTask<ItemsProviderResult<SmtpMessage>> LoadMessages(
        ItemsProviderRequest request)
    {
        await using var dbContext = await _dbContextFactory.CreateDbContextAsync(request.CancellationToken);
        var messages = await dbContext.Messages
            .AsNoTracking()
            .OrderByDescending(x => x.Date)
            .Skip(request.StartIndex)
            .Take(request.Count)
            .ToListAsync();
        var messageCount = await dbContext.Messages.AsNoTracking().CountAsync();

        return new ItemsProviderResult<SmtpMessage>(messages, messageCount);
    }

    private async void OnElapsed(object? sender, ElapsedEventArgs args)
    {
        try
        {
            if (_messages == null) return;

            await _messages.RefreshDataAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Something went wrong fetching message list");
        }
    }

    private string FormatAddress(SmtpAddress address)
    {
        if (!string.IsNullOrWhiteSpace(address.Name))
        {
            return address.Name;
        }

        return address.Address ?? "No Address Found";
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}