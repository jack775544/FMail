@page "/"
@implements IDisposable
@using Microsoft.EntityFrameworkCore
@using FMail.Services
@using FMail.Data
@inject IDbContextFactory<SmtpDbContext> DbContextFactory
@inject IMessageStoreChanged MessageStoreChanged
@inject ILogger<Index> Logger

<PageTitle>Messages</PageTitle>

<h1>Messages</h1>

<table class="table table-hover table-sm">
    <thead>
    <th>From</th>
    <th>To</th>
    <th>Subject</th>
    <th>Date</th>
    </thead>
    <tbody>
    <Virtualize Context="message" ItemsProvider="@LoadMessages" @ref="_messages">
        <tr>
            <td>
                <a href="/message/@message.Id">@SmtpAddress.FormatAddresses(message.From ?? [])</a>
            </td>
            <td>
                <a href="/message/@message.Id">@SmtpAddress.FormatAddresses(message.To ?? [])</a>
            </td>
            <td>
                <a href="/message/@message.Id">@message.Subject</a>
            </td>
            <td>
                <a href="/message/@message.Id">@message.Date</a>
            </td>
        </tr>
    </Virtualize>
    </tbody>
</table>

@code
{
    private Virtualize<SmtpMessage> _messages = null!;

    protected override void OnInitialized()
    {
        MessageStoreChanged.OnMessageChanged += ReloadMessages;
    }

    private async ValueTask<ItemsProviderResult<SmtpMessage>> LoadMessages(
        ItemsProviderRequest request)
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync(request.CancellationToken);
        var messages = await dbContext.Messages
            .AsNoTracking()
            .OrderByDescending(x => x.Date)
            .Skip(request.StartIndex)
            .Take(request.Count)
            .ToListAsync();
        var messageCount = await dbContext.Messages.AsNoTracking().CountAsync();

        return new ItemsProviderResult<SmtpMessage>(messages, messageCount);
    }

    private async void ReloadMessages()
    {
        try
        {
            await _messages.RefreshDataAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Something went wrong fetching message list");
        }
    }

    public void Dispose()
    {
        MessageStoreChanged.OnMessageChanged -= ReloadMessages;
    }
}